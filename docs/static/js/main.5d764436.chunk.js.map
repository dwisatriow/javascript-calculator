{"version":3,"sources":["components/Pad.js","components/Numpad.js","components/Display.js","App.js","reportWebVitals.js","index.js"],"names":["Pad","id","text","handleFunction","useState","classNames","setClassNames","className","onClick","event","onAnimationEnd","Numpad","handleNumber","handleOperator","handleResult","handleDelete","handleClearAll","map","pad","op","Display","input","output","displayOutput","join","length","App","setInput","setOutput","calculate","calculationStr","calculation","concat","replace","test","Function","num","target","innerText","prevInput","prevOutput","match","slice","result","newOutput","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5d764436.chunk.js","sourcesContent":["import { useState } from 'react';\nimport './Pad.scss';\n\nfunction Pad({ id, text, handleFunction }) {\n  const [classNames, setClassNames] = useState('');\n\n  function handleClick(event) {\n    handleFunction(event);\n    setClassNames('clicked');\n  }\n\n  function onAnimationEnd() {\n    setClassNames('');\n  }\n\n  return (\n    <div \n      id={id}\n      className={`pad ${classNames}`}\n      onClick={handleClick}\n      onAnimationEnd={onAnimationEnd}\n    >\n      {text}\n    </div>\n  )\n}\n\nexport default Pad;","import Pad from './Pad';\nimport './Numpad.scss';\n\nfunction Numpad({ handleNumber, handleOperator, handleResult, handleDelete, handleClearAll }) {\n  const number = [\n    { id: 'one', text: '1' }, { id: 'two', text: '2' }, { id: 'three', text: '3' },\n    { id: 'four', text: '4' }, { id: 'five', text: '5' }, { id: 'six', text: '6' },\n    { id: 'seven', text: '7' }, { id: 'eight', text: '8' }, { id: 'nine', text: '9' },\n    { id: 'zero', text: '0' }, { id: 'decimal', text: '.' }\n  ];\n  const operator = [\n    { id: 'add', text: '+' }, { id: 'subtract', text: '-' },\n    { id: 'multiply', text: '×' }, { id: 'divide', text: '÷' },\n  ];\n\n  return (\n    <div id=\"numpad\">\n      { number.map(pad => <Pad key={pad.id} id={pad.id} text={pad.text} handleFunction={handleNumber} />) }\n      { operator.map(op => <Pad key={op.id} id={op.id} text={op.text} handleFunction={handleOperator} />) }\n      <Pad key=\"equals\" id=\"equals\" text='=' handleFunction={handleResult} />\n      <Pad key=\"del\" id=\"del\" text='DEL' handleFunction={handleDelete} />\n      <Pad key=\"ac\" id=\"ac\" text='AC' handleFunction={handleClearAll} />\n    </div>\n  );\n}\n\nexport default Numpad;","import './Display.scss';\n\nfunction Display({ input, output }) {\n  const displayOutput = output.join('');\n\n  return (\n    <div id=\"display-container\">\n      <p id=\"output\">{ displayOutput }</p>\n      <p id=\"display\">{ input === null ? output[output.length-1] : input ? input : 0 }</p>\n    </div>\n  );\n}\n\nexport default Display;","import { useState } from 'react';\nimport Numpad from './components/Numpad';\nimport Display from './components/Display';\nimport './App.scss';\n\nfunction App() {\n  // initialize input and output state\n  const [input, setInput] = useState(\"\");\n  const [output, setOutput] = useState([]);\n\n  // function handling pressed number\n  const handleNumber = (event) => {\n    const num = event.target.innerText;\n\n    setInput(prevInput => {\n      // limit digit\n      if (prevInput.length > 11) {\n        return prevInput;\n      }\n\n      // prevent input to begin with multiple 0's\n      if (num === \"0\" && /^0/.test(prevInput) && !(/[1-9]+0*$/.test(prevInput)))\n        return prevInput;\n\n      // prevent input adding number after a calculation\n      if (/=/.test(output.join('')))  \n        return prevInput;\n        \n      // prevent input to have multiple decimals and prevent adding decimal after a calculation\n      if (num === \".\" && (/\\./.test(prevInput) || /=/.test(output.join(''))))\n        return prevInput;\n\n      // handle point as first input\n      if (num === \".\" && !(prevInput))\n        return \"0.\";\n\n      // prevent number following 0 as first input\n      if (/[1-9]/.test(num) && /^0/.test(prevInput) && !(/^0\\./.test(prevInput)))\n        return prevInput;\n\n      // prevent number following operator on input\n      if (/[\\+×÷-]$/.test(prevInput))\n        return num;\n\n      // add the number to input\n      return prevInput + num;\n    });\n    \n    setOutput(prevOutput => {\n      // limit digit\n      if (prevOutput.length > 0\n          && prevOutput.join('').match(/\\d+\\.*\\d*$/g) !== null\n          && prevOutput.join('').match(/\\d+\\.*\\d*$/g).join('').length > 11) {\n        return prevOutput;\n      }\n\n      // prevent output to begin with multiple 0's\n      if (num === \"0\" && /^0/.test(prevOutput.join('')))\n        return prevOutput;\n      \n      // handle point as first output\n      if (num === \".\" && prevOutput.length === 0)\n        return prevOutput.concat([\"0.\"]);\n\n      // prevent output adding number after a calculation\n      if (/=/.test(output.join('')))\n        return prevOutput;\n      \n      // prevent output to add series of decimals\n      if (num === \".\" && /\\.$/.test(prevOutput.join('')))\n        return prevOutput;\n\n      // prevent adding multiple decimal to a number and after a calculation\n      if (num === \".\"\n          && /[\\+×÷-]*\\d+\\.\\d+$/.test(prevOutput.join(''))\n          || /=/.test(prevOutput.join('')))\n        return prevOutput;\n\n      // add the number to output\n      return prevOutput.concat([num]);\n    });\n  }\n\n  // function handling pressed operator\n  const handleOperator = (event) => {\n    const op = event.target.innerText;\n\n    setInput(prevInput => {\n      // prevent operator as first input\n      if (!prevInput) return prevInput;\n\n      //prevent operator following decimal\n      if (/\\.$/.test(output.join('')))\n        return prevInput;\n\n      // prevent adding sequential same operator to the input\n      if (op === prevInput)\n        return prevInput;\n\n      // start new calculation if previous calculation present\n      if (/=/.test(output.join(''))) {\n        setOutput([input].concat([op]));\n        return op;\n      }\n\n      return op;  // add the operator to input\n    });\n    \n    setOutput(prevOutput => {\n      // prevent operator as first output\n      if (prevOutput.length === 0) return prevOutput;\n\n      //prevent operator following decimal\n      if (/\\.$/.test(output.join('')))\n        return prevOutput;\n\n      // handle negative number following operator\n      if (op === \"-\"\n          && /[\\+×÷-]$/.test(prevOutput.join(''))\n          && !(/[\\+×÷-]{2}$/.test(prevOutput.join(''))))\n        return prevOutput.concat([op]);\n\n      // handle three series of operator with subtract in the middle\n      if (/[\\+×÷-]{1}-{1}$/.test(prevOutput.join('')))\n        return prevOutput.slice(0, prevOutput.length - 2).concat([op]);\n        \n      // prevent adding sequential same operator to the output\n      if (prevOutput[prevOutput.length - 1] === op)\n        return prevOutput;\n\n      // handle changing operator on the output\n      if (/[\\+×÷-]$/.test(prevOutput.join('')))\n        return prevOutput.slice(0, prevOutput.length - 1).concat([op]);\n\n      return prevOutput.concat([op]);\n    });\n  }\n\n  // converting string to real calculation\n  const calculate = (calculationStr) => {\n    let calculation = \"\".concat(calculationStr);\n\n    // replace multiply and divide symbol\n    calculation = calculation.replace(/×/g, \"*\");\n    calculation = calculation.replace(/÷/g, \"/\");\n\n    // handle sequence of minus\n    if (/--/.test(calculation))\n      calculation = calculation.replace(/(--)/, \"+\");\n\n    return new Function('return ' + calculation)();\n  }\n\n  // function handling pressed equals\n  const handleResult = () => {\n    let result;\n\n    // prevent equals as first input\n    if (!input) return;\n\n    //prevent equals following decimal\n    if (/\\.$/.test(output.join('')))\n      return;\n\n    // prevent multiple equals in calculation\n    if (/=/.test(output.join('')))\n      return;\n\n    // calculating the result\n    if (/[\\+×÷-]$/.test(output.join(''))) {  // prevent operator as the last output before calculating\n      setOutput(prevOutput => {\n        const newOutput = prevOutput.slice(0, prevOutput.length - 1);\n        result = calculate(newOutput.join(''));\n        return newOutput\n      })\n    } else {\n      result = calculate(output.join(''));\n    }\n\n    setInput(result);\n    setOutput(prevOutput => {\n      return prevOutput.concat(['=', result]);\n    });\n  }\n\n  // function handling pressed CE\n  const handleDelete = () => {\n    // prevent clearing entry after calculation completed\n    if (/=/.test(output.join('')))\n      return;\n\n    setOutput(prevOutput => {\n      setInput(prevOutput[prevOutput.length - 2] || \"\");\n      return prevOutput.slice(0, prevOutput.length - 1);\n    });\n  }\n  \n  // function handling pressed AC\n  const handleClearAll = () => {\n    setInput(\"\");\n    setOutput([]);\n  }\n  \n  return (\n    <div id=\"app\">\n      <h1 id=\"app-name\">CALCULATOR</h1>\n      <Display input={input} output={output} />\n      <Numpad\n        handleNumber={handleNumber}\n        handleOperator={handleOperator}\n        handleResult={handleResult}\n        handleDelete={handleDelete}\n        handleClearAll={handleClearAll}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}